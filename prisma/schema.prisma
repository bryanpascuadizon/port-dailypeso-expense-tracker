// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @default("User")
  email              String               @unique(map: "user_email_idx")
  image              String?
  emailVerified      DateTime?
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt
  Account            Account[]
  Session            Session[]
  Transaction        Transaction[]
  TransactionAccount TransactionAccount[]
}

model Transaction {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @db.Uuid
  date                 DateTime @default(now()) @db.Timestamp(6)
  amount               Decimal  @default(0) @db.Decimal(12, 2)
  note                 String   @default("")
  type                 String   @default("")
  transactionAccountId String   @db.Uuid

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionAccount TransactionAccount @relation(fields: [transactionAccountId], references: [id], onDelete: Cascade)
}

model TransactionAccount {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String
  userId String @db.Uuid

  User        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updateAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updateAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
